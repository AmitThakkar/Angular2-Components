{
  "name": "Angular2-components",
  "tagline": "",
  "body": "Angular2 Components\r\n-------------------\r\n\r\n**Angular2** is on **BETA** now. So its great time to explore **Angular2** as **Angular2** team is mostly\r\nworking on new features and bug fixes so no fundamental/major changes will happen in **Angular2** \r\napplication.\r\n\r\nSo lets write our first `Hello World` application with **Angular2**.\r\n\r\n**index.html**\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Angular 2 Hello World</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <!-- 1. Load libraries -->\r\n    <!-- IE required polyfills (from CDN), in this exact order -->\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.33.3/es6-shim.min.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.16/system-polyfills.js\"></script>\r\n    <script src=\"https://code.angularjs.org/tools/system.js\"></script>\r\n    <script src=\"https://code.angularjs.org/tools/typescript.js\"></script>\r\n    <script src=\"https://code.angularjs.org/2.0.0-beta.7/angular2-polyfills.js\"></script>\r\n    <script src=\"https://code.angularjs.org/2.0.0-beta.7/Rx.js\"></script>\r\n    <script src=\"https://code.angularjs.org/2.0.0-beta.7/angular2.dev.js\"></script>\r\n    <!-- 2. Configure SystemJS -->\r\n    <script>\r\n        System.config({\r\n            transpiler: 'typescript',\r\n            typescriptOptions: {emitDecoratorMetadata: true},\r\n            packages: {'app': {defaultExtension: 'ts'}}\r\n        });\r\n        System.import('app/main')\r\n            .then(null, console.error.bind(console));\r\n    </script>\r\n</head>\r\n<!-- 3. Display the application -->\r\n<body>\r\n<hello-world>Loading...</hello-world>\r\n</body>\r\n</html>\r\n```\r\n\r\nIn `index.html`, we are loading all required `.js` files e.g. `Angular2`, `TypeScript`, `System.js` etc. And with the\r\nhelp of `System.config` method, we are loading our main file `main.ts`.\r\n\r\n> We are using `Type-Script` therefore in `System.config` transpiler is `typescript`, and defaultExtension is `ts`.\r\n\r\nElement `<hello-world>` tag will display **Loading...** till `HelloWorld` component does not gets loaded successfully.\r\n\r\n**main.ts**\r\n```JavaScript\r\nimport {bootstrap}  from 'angular2/platform/browser';\r\nimport {HelloWorld} from './hello_world';\r\nbootstrap(HelloWorld);\r\n```\r\n\r\nIn `main.ts`, we are requiring **bootstrap** package from `angular2/platform/browser` and **HelloWorld** package from\r\n`./hello_world`.\r\n\r\n> **bootstrap** package bootstrap the **Angular2** app with provided package.\r\n\r\nAnd on third line, we are bootstrapping **HelloWorld** package, so this package will be available in `index.html`.\r\n\r\n**hello_world.ts**\r\n```JavaScript\r\n\r\n// Require Component package from `angular2/core` package, so Angular can recognize that it is a component.\r\n\r\nimport {Component} from 'angular2/core';\r\n\r\n// Below is the decorator, and we define configurations in the decorator for component.\r\n\r\n@Component({\r\n\r\n    // Defining selector for the component so that we can tag component/directive in .html file to the attached component.\r\n    \r\n    selector: 'hello-world',\r\n    \r\n    // Providing .html for the component. You can provide HTML directly with property template as we do in Angular1.X\r\n    \r\n    templateUrl: 'app/hello_world.html'\r\n})\r\n\r\n/*\r\n * Following is the TypeScript Class, which will be compiled into old JavaScript Class.\r\n * And we are exporting it so it will be available in other files and modules.\r\n * \r\n */\r\n \r\nexport class HelloWorld {\r\n    // Declaring the variable to bind with initial value\r\n    name:string = '';\r\n}\r\n```\r\n\r\nIn `hello_world.ts` we are requiring **Component** package form `angular2/core` so **Angular2** will be able to recognize\r\nthat it is a component.\r\n\r\nWith `@Component` decorator, we are providing configuration for component. i.e. selector and templateUrl.\r\n\r\nAnd in last, we are exporting **Type-Script** class. So this component will be available in other files and modules\r\nwhere it will be imported and we are defining a property **name** in HelloWorld class.\r\n\r\n**hello_world.html**\r\n```HTML\r\n<label>Name:</label>\r\n<!-- data-bind to the input element; store value in name -->\r\n<input type=\"text\" [(ngModel)]=\"name\" placeholder=\"Enter a name here\">\r\n<hr>\r\n<!-- conditionally display `name` -->\r\n<h1 [hidden]=\"!name\">Hello {{name}}!</h1>\r\n```\r\n\r\nIn `hello_world.html` we are doing 2-way-data binding for name property on input. And showing `Hello {{name}}` if \r\nname is present.\r\n\r\n> For 2-way-binding, we are using [(ngModel)] and for hiding element we are using [hidden] attribute.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}